server:
  port: 8008
spring:
  cloud:
#    sentinel:
#      transport:
#        dashboard: 127.0.0.1:8080 #配置Sentinel dashboard地址
#        port: 8719  #这个端口配置会在应用对应的机器上启动一个Http Server，该Server会与 Sentinel 控制台做交互
    gateway:
      # 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]
      routes:
        - id: example-cloud-oauth             # 当前路由的标识, 要求唯一
          uri: lb://example-cloud-oauth       # lb指的是从 nacos 中按照名称获取微服务,并遵循负载均衡策略
          predicates:                    # 断言(就是路由转发要满足的条件)
            - Path=/oauth/**             # 当请求路径满足Path指定的规则时,才进行路由转发
        # 我们⾃定义的路由 ID，保持唯⼀
        - id: example-cloud-api
          # ⽬标服务地址（部署多实例）
          uri: lb://example-cloud-api
          # gateway⽹关从服务注册中⼼获取实例信息然后负载后路由
          # 断⾔：路由条件，Predicate 接受⼀个输⼊参数，返回⼀个布尔值结果。该接⼝包含多种默认⽅法来将 Predicate 组合成其他复杂的逻辑（⽐如：与，或，⾮）。
          predicates:
            - Path=/example-gateway/api/**
          filters:                       # 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改
            - StripPrefix=1              # 转发之前去掉1层路径
  application:
    name: example-cloud-gateway